#!/usr/bin/env python

import actionlib
import rospy
import yaml
import sys
from rbd_movo_motor_skills.head_and_torso import TorsoJTAS
from rbd_movo_motor_skills.motion_planning.framework import Executor
from rbd_movo_motor_skills.config import TORSO_HEIGHT_MAX, TORSO_HEIGHT_MIN

class TorsoCommandExecutor(Executor):

    """
    cue args:
       height: target height to move the torso to. Valid number is between 0 ~ 0.6(m)
       vel: velocity of movement. Default 0.05
    """

    def __init__(self, name, cue, timeout=15):
        super(TorsoCommandExecutor, self).__init__(name, cue)
        self.torso_jtas = TorsoJTAS()
        self._timeout = timeout

    def make_goal(self, cue):
        args = cue["args"]
        vel = args.get("vel", 0.05)
        desired_height = args["height"]
        if desired_height < TORSO_HEIGHT_MIN or desired_height > TORSO_HEIGHT_MAX:
            rospy.logwarn("Specified torso goal height {} is out of range ({} ~ {}). Will clamp."\
                          .format(desired_height, TORSO_HEIGHT_MIN, TORSO_HEIGHT_MAX))
            desired_height = max(TORSO_HEIGHT_MIN, min(TORSO_HEIGHT_MAX, desired_height))
        return TorsoJTAS.make_goal(desired_height,
                                   v=vel)

    def _execute(self):
        self.torso_jtas.client.send_goal(self.goal)
        self.torso_jtas.client.wait_for_result(timeout=rospy.Duration(self._timeout))
        current_height = TorsoJTAS.wait_for_torso_height()
        self.loginfo("Torso moved to height: {}".format(current_height))

    def on_stop(self):
        if self.torso_jtas.client.simple_state != actionlib.SimpleGoalState.DONE:
            self.torso_jtas.client.cancel_goal()


def __test():
    # For testing only
    node_name = "TorsoCommand_Exe"
    cue = {"type": 'Torso', "args": {"height": 0.5}}
    executor = TorsoCommandExecutor(node_name, cue)
    executor.run()

if __name__ == "__main__":
    # node_name = sys.argv[1]
    # cue = yaml.load(sys.argv[2])
    # executor = TorsoCommandExecutor(node_name, cue)
    # executor.run()
    __test()
