#!/usr/bin/env python

import rospy
import yaml
import sys
from sensor_msgs.msg import JointState
from rbd_movo_motor_skills.motion_planning.framework import Verifier

class TorsoCommandVerifier(Verifier):
    """
    cue args:
       height: target height to move the torso to. Valid number is between 0 ~ 0.6(m)
       vel: velocity of movement. Default 0.05
       torso_topic: topic used to get torso state. Default "/movo/linear_actuator/joint_states"
       tolerance: amount of difference allowed between desired and actual height (default: 0.05).
    """
    def __init__(self, name, cue, rate=10):
        super(TorsoCommandVerifier, self).__init__(name, cue, rate=rate)
        args = cue["args"]
        torso_topic = args.get("torso_topic", "/movo/linear_actuator/joint_states")
        self._desired_height = args["height"]
        self._tolerance = args.get("tolerance", 0.05)
        rospy.Subscriber(torso_topic,
                         JointState,
                         self._callback)

    def _callback(self, m):
        torso_height = m.position[0]
        if abs(torso_height - self._desired_height) < self._tolerance:
            self.message = "ok"
            self.status = Verifier.DONE
            return
        self.message = "Torso height not reached."
        self.status = Verifier.NOT_DONE


if __name__ == "__main__":
    node_name = sys.argv[1]
    cue = yaml.load(sys.argv[2])
    verifier = TorsoCommandVerifier(node_name, cue, rate=10)
    verifier.run()
