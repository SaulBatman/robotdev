#!/usr/bin/env python

import sys
import yaml

import tf2_ros
import rospy
import numpy as np

from geometry_msgs.msg import PoseStamped
from ar_track_alvar_msgs.msg import AlvarMarkers
from rbd_movo_motor_skills.motion_planning.framework import Verifier
from rbd_movo_motor_skills.utils.ros_utils import (
    quat_diff_angle_relative,
    to_degrees,
    tf2_frame,
    tf2_header,
    tf2_frame_eq,
    tf2_transform,
    topic_exists,
    pose_to_tuple,
    euclidean_dist,
)

class ARTagPoseVerifier(Verifier):
    """
    Assumes the AR Tag detector node is running.
    You may want to start the relevant system launch
    file first.

    Notes:
     - By default, ar_track_alvar publishes messages of detections
       to /ar_pose_marker and each message's header's frame is
       kinect2_color_optical_frame
     - For now, this verifier verifies only one ar tag.

    Arguments (cue['args']):
      Either:
      - pose: expected [x y z (qx qy qz qw)] pose for the AR tag
      - tolerance_posit: tolerance in position (float)
      - tolerance_orien: tolerance in rotation (float)
      Or (less useful, more for basic testing):
      - dist: Euclidean distance to the origin of the base frame
      - tolerance: acceptable offset in distance
      Optionally:
      - base_frame: frame the ar tag pose is relative to (default /kinect2_color_optical_frame)
      - id: ar tag id to track. If not provided, then will check for
            all detected AR tags.
      """
    def __init__(self, name, cue, rate=10):
        super(ARTagPoseVerifier, self).__init__(name, cue, rate=rate)
        args = cue["args"]
        # tf2_frame removes leading slash in tf base frame
        # (you can't have leading slashes on TF2 frame names).
        self._base_frame = tf2_frame(args.get("base_frame", "kinect2_color_optical_frame"))
        self._id = args.get("id", "any")

        # subscribes to relevant topics
        ar_topic = "/ar_pose_marker"
        if not topic_exists(ar_topic):
            raise ValueError("AR detection topic {} does not exist!".format(ar_topic))
        rospy.Subscriber(ar_topic, AlvarMarkers, self._callback)
        # tf listener
        self._tfbuffer = tf2_ros.Buffer()
        self._tflistener = tf2_ros.TransformListener(self._tfbuffer)

    def _check_pose(self, artag_id, artag_pose_stamped):
        """
        Args:
            artag_pose_stamped (geometry_msgs/PoseStamped): this pose
                is assumed to already be in the base frame in the spec.
        """
        args = self.cue["args"]
        actual_pose = pose_to_tuple(artag_pose_stamped.pose)
        if "pose" in args:
            tolerance_posit = args.get("tolerance_posit", 0.1)
            tolerance_orien = args.get("tolerance_orien", 0.1)
            expected_pose = args["pose"]
            pos_diff = euclidean_dist(expected_pose[:3], actual_pose[:3])
            if pos_diff > tolerance_posit:
                self.message = "position is off ({} > {})".format(pos_diff, tolerance_posit)
                return False
            expected_q = expected_pose[3:]
            actual_q = actual_pose[3:]
            ## TODO: BUGGY
            orien_diff = to_degrees(abs(quat_diff_angle_relative(expected_q, actual_q)))
            if orien_diff > tolerance_orien:
                self.message = "orientation is off ({:.5} > {})".format(orien_diff, tolerance_orien)
                return False
        elif "dist" in args:
            tolerance = args.get("tolerance", 0.1)
            expected_dist = args["dist"]
            actual_dist = euclidean_dist(actual_pose[:3], (0, 0, 0))
            if abs(actual_dist - expected_dist) > tolerance:
                self.message = "Detected marker {}. "\
                    "But actual distance {} is not within tolerance ({}) from expected distance {} "\
                    .format(artag_id, actual_dist, tolerance, expected_dist)
                return False
        self.message = "Detected marker {} and it is good.".format(artag_id)
        return True

    def _callback(self, m):
        """Check whether the pose of the ar tag detection
        satisfies the specification.
        Arg:
           m (AlvarMarekrs): The AR tag detections
        """
        for d in m.markers:
            artag_id = d.id
            if self._id != "any" and artag_id != self._id:
                continue

            # This ar tag detection has acceptable id.
            ## Note: the header in d.pose (PoseStamped) is not usable.
            ## Must construct our own using the good header in d (AlvarMarker)
            artag_pose_stamped = PoseStamped(tf2_header(d.header), d.pose.pose)
            if not tf2_frame_eq(artag_pose_stamped.header.frame_id, self._base_frame):
                artag_pose_stamped_new = tf2_transform(
                    self._tfbuffer, artag_pose_stamped, self._base_frame)
                if artag_pose_stamped_new is None:
                    # something happened to tf. Perhaps we need to wait longer.
                    self.message = "tf transform listener exception occurred"
                    return

            # now, we check if the artag pose is what we'd like
            ok = self._check_pose(artag_id, artag_pose_stamped)

            # Update status.
            if ok:
                self.message = "ok"
                self.status = Verifier.DONE
                return
        self.status = Verifier.NOT_DONE


if __name__ == "__main__":
    node_name = sys.argv[1]
    cue = yaml.load(sys.argv[2])
    verifier = ARTagPoseVerifier(node_name, cue, rate=10)
    verifier.run()
