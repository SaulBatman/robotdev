#!/usr/bin/env python
import actionlib
import rospy
import yaml
import sys

# reference: http://wiki.ros.org/control_msgs
from control_msgs.msg import (
    GripperCommand,
    GripperCommandAction,
    GripperCommandGoal
)

from rbd_movo_motor_skills.motion_planning.framework import Executor
from rbd_movo_motor_skills.config import GRIPPER_POSITION_MAX
from rbd_movo_motor_skills.utils.ros_utils import remap


class GripperCommandExecutor(Executor):
    """
    cue args:
       position: Gripper goal position; must be in range (0.0 ~ 1.0).
                 The actual value sent to MOVO's GripperActionServer
                 is remapped to be within 0 to 0.165
    """
    def __init__(self, name, cue, timeout=15):
        super(GripperCommandExecutor, self).__init__(name, cue)
        side = cue["args"]["side"]

        # This implementation borrows
        # from movo_action_clients.gripper_action_client.GripperActionClient
        self._client = actionlib.SimpleActionClient(
            '/movo/%s_gripper_controller/gripper_cmd' % side,
            GripperCommandAction,
        )
        server_up = self._client.wait_for_server(timeout=rospy.Duration(timeout))
        if not server_up:
            rospy.logerr("Timed out waiting for Gripper Command"
                         " Action Server to connect. Start the action server"
                         " before running example.")
            rospy.signal_shutdown("Timed out waiting for Action Server")
            sys.exit(1)
        self._timeout = timeout

    def make_goal(self, cue):
        """create a GripperCommandGoal"""
        # the specified position must be within 0 to 1
        spec_position = cue["args"]["position"]
        if spec_position < 0.0 or spec_position > 1.0:
            rospy.logwarn("Specified gripper goal position {} is out of range (0.0 ~ 1.0). Will clamp."\
                          .format(self._goal_position))
            spec_position = max(0.0, min(1.0, spec_position))
        self._goal_position = remap(spec_position, 0., 1., 0., GRIPPER_POSITION_MAX)
        self._max_effort = cue["args"].get("max_effort", -1.0)
        goal = GripperCommandGoal()
        goal.command.position = self._goal_position
        goal.command.max_effort = self._max_effort
        return goal

    def run(self):
        self._client.send_goal(self.goal)
        self._client.wait_for_result(timeout=rospy.Duration(self._timeout))

    def on_stop(self):
        self._client.cancel_goal()


if __name__ == "__main__":
    node_name = sys.argv[1]
    cue = yaml.load(sys.argv[2])
    executor = GripperCommandExecutor(node_name, cue)
    executor.run()

    # # For testing only
    # node_name = "GripperState_Exe"
    # cue = {"type": 'GripperState', "args": {"side": "left", "position": 0.0}}
    # executor = GripperStateExecutor(node_name, cue)
    # executor.run()
