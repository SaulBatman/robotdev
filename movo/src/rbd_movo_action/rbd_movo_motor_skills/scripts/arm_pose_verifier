#!/usr/bin/env python

import rospy
import yaml
import sys
import tf2_ros
from actionlib_msgs.msg import GoalStatusArray, GoalStatus
from sensor_msgs.msg import JointState
from rbd_movo_motor_skills.motion_planning.framework import Verifier
from rbd_movo_motor_skills.utils.ros_utils import (
    joint_state_dict,
    tf2_lookup_transform,
    transform_to_tuple
)

class ArmPoseVerifier(Verifier):
    def __init__(self, name, cue, rate=10):
        super(ArmPoseVerifier, self).__init__(name, cue, rate=rate)
        rospy.Subscriber("/move_group/status",
                         GoalStatusArray,
                         self._callback)
        # tf listener
        self._tfbuffer = tf2_ros.Buffer()
        self._tflistener = tf2_ros.TransformListener(self._tfbuffer)

    def _callback(self, m):
        for status_msg in m.status_list:
            self.message = "status {}: {}".format(status_msg.status, status_msg.text)
            if status_msg.status == GoalStatus.SUCCEEDED:
                ok, smallest_diff = self._check_arm_config_satisfaction()
                if ok:
                    self.status = Verifier.DONE
                else:
                    self.message = "Although Moveit! reports success, difference (>={:.5f}) is larger than tolerance.".format(smallest_diff)
                    self.status = Verifier.NOT_DONE
                    return
            elif status_msg.status == GoalStatus.ABORTED:
                self.status = Verifier.NOT_DONE

    def _check_arm_config_satisfaction(self):
        """
        Checks whether the arm's current configuration
        satisfies what is in the 'cue'.
        """
        args = self.cue["args"]
        side = args['side']
        tolerance = args.get("tolerance", 0.01)
        goal_spec = args["goal"]
        smallest_diff = float('inf')
        ok = True
        if goal_spec['type'] == "joints":
            actual_joint_state = rospy.wait_for_message(
                "/movo/{}_arm/joint_states".format(side),
                JointState, timeout=15)
            actual_joint_dict = joint_state_dict(
                actual_joint_state.position,
                actual_joint_state.name
            )
            expected_joint_dict = joint_state_dict(
                goal_spec['positions'],
                goal_spec['joint_names']
            )
            for n in expected_joint_dict:
                if n in actual_joint_dict:
                    diff = abs(actual_joint_dict[n] - expected_joint_dict[n])
                    smallest_diff = min(diff, smallest_diff)
                    if diff > tolerance:
                        ok = False
                else:
                    ok = False

        elif goal_spec['type'] == 'pose' or goal_spec['type'] == 'ee':
            # Obtain tf transform from end effector to frame
            ee_frame = "{}_ee_link".format(side)
            base_frame = args.get("frame", "base_link")
            trans = tf2_lookup_transform(self._tfbuffer, base_frame, ee_frame, rospy.Time(0))
            if trans is None:
                rospy.logerr("lookup transform from {} to {} failed".format(ee_frame, base_frame))
                ok = False  # lookup error
            else:
                actual_pose = transform_to_tuple(trans.transform)
                expected_pose = tuple(goal_spec['pose']['position']) + tuple(goal_spec['pose']['orientation'])

                for actual, expected in zip(actual_pose, expected_pose):
                    diff = abs(actual - expected)
                    smallest_diff = min(diff, smallest_diff)
                    if abs(actual - expected) > tolerance:
                       ok = False
        else:
            raise ValueError("Invalid arm config goal type: {}".format(goal_spec['type']))
        return ok, smallest_diff


if __name__ == "__main__":
    node_name = sys.argv[1]
    cue = yaml.load(sys.argv[2])
    verifier = ArmPoseVerifier(node_name, cue, rate=10)
    verifier.run()
