#!/usr/bin/env python
import actionlib
import rospy
import yaml
import sys

# reference: http://wiki.ros.org/control_msgs
from control_msgs.msg import (
    GripperCommand,
    GripperCommandAction,
    GripperCommandGoal
)

from rbd_movo_motor_skills.motion_planning.framework import Executor


class GripperStateExecutor(Executor):
    def __init__(self, name, cue, timeout=15):
        super(GripperStateExecutor, self).__init__(name, cue)
        side = cue["args"]["side"]

        self._goal_position = cue["args"]["position"]
        if self._goal_position < 0.0 or self._goal_position < 0.165:
            rospy.logwarn("Gripper goal position {} is out of range (0.0 ~ 0.165). Will clamp."\
                          .format(self._goal_position))
            self._goal_position = max(0.0, min(0.165, self._goal_position))

        self._max_effort = cue["args"].get("max_effort", -1.0)

        # This implementation borrows
        # from movo_action_clients.gripper_action_client.GripperActionClient
        self._client = actionlib.SimpleActionClient(
            '/movo/%s_gripper_controller/gripper_cmd' % side,
            GripperCommandAction,
        )
        server_up = self._client.wait_for_server(timeout=rospy.Duration(timeout))
        if not server_up:
            rospy.logerr("Timed out waiting for Gripper Command"
                         " Action Server to connect. Start the action server"
                         " before running example.")
            rospy.signal_shutdown("Timed out waiting for Action Server")
            sys.exit(1)
        self._timeout = timeout

    def make_goal(self, cue):
        """create a GripperCommandGoal"""
        goal = GripperCommandGoal()
        goal.command.position = self._goal_position
        goal.command.max_effort = self._max_effort
        return goal

    def run(self):
        self._client.send_goal(self.goal)
        self._client.wait_for_result(timeout=rospy.Duration(self._timeout))

    def on_stop(self):
        self._client.cancel_goal()


if __name__ == "__main__":
    TEST = True

    if TEST:
        node_name = "GripperState_Exe"
        cue = {"type": 'GripperState', "args": {"side": "left", "position": 0.1}}
        executor = GripperStateExecutor(node_name, cue)
        executor.run()

    else:
        node_name = sys.argv[1]
        cue = yaml.load(sys.argv[2])
        executor = GripperStateExecutor(node_name, cue)
        executor.run()
